<?php

namespace Odiseo\Bundle\ProductBundle\Repository;

use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\Query\Expr;
use Odiseo\Bundle\EcommerceBundle\Filters\WhereQueryBuilder;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;
use Doctrine\Common\Collections\ArrayCollection;
/**
 * MediaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
	public function filterByTown()
	{
		$expr = new Expr();
		$ids = array(70,41);
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();
		$qb->select('p')
		->from('OdiseoProductBundle:Product', 'p')
		->where($expr->in('p.town', $ids) );
		$query = $qb->getQuery();
		$result = $query->getResult();
		return $result;
	}
	
	
	public function filterByProductType(){
		$expr = new Expr();
		$ids = array(1,3);
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();
		$qb->select('p')
		->from('OdiseoProductBundle:Product', 'p')
		->where($expr->in('p.type', $ids) ); 
		$query = $qb->getQuery();
		$result = $query->getResult();
		return $result;
	}
	
	public function filterByPriceRange($minValue, $maxValue){
		$expr = new Expr();
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();
		$qb->select('p')
		->from('OdiseoProductBundle:Product', 'p')
		->where($expr->between('p.price', $minValue, $maxValue));
		$query = $qb->getQuery();
		$result = $query->getResult();
		return $result;
	}
	
	/**
	 * @param $filters array of filters.
	 * 
	 * @return QueryBuilder
	 */
	public function findProductWithFiltersQuery($filters)
	{
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();
	
		$query = WhereQueryBuilder::getQuery($qb, 'OdiseoProductBundle:Product', $filters);
	
		return $query;
	}
	
	/**
	 * @param $filters array of filters.
	 * 
	 * @return ArrayCollection
	 */
	public function findProductWithFilters($filters, $page = null)
	{
		return $this->findProductWithFiltersQuery($filters)->getResult();
	}
	
	/**
	 * @param $filters array of filters.
	 * @param $page
	 *
	 * @return Pagerfanta
	 */
	public function findProductWithFiltersPager($filters, $page = 1)
	{
		$queryBuilder = $this->findProductWithFiltersQuery($filters);
		
		$adapter = new DoctrineORMAdapter($queryBuilder);
		$pagerfanta = new Pagerfanta($adapter);
		$pagerfanta->setCurrentPage($page);
		
		return $pagerfanta;
	}
}
